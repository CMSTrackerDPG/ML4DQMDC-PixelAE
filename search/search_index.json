{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is some test text","title":"Home"},{"location":"utils/ae_combine_utils/","text":"histstructure (no valid documentation found) init (self) (no valid documentation found) create(self,year,histnames,jsonselector=None,highstatonly=False,dcsononly=False) create the histstructure given the arguments provided most arguments are self-explanatory remarks: - if jsonselector is None, no selection will be done on run/ls number, i.e. all runs and lumisections are kept - if jsonselector contains a single negative run number as key, templates will be used (e.g. averaging the dataset) instead of actual ls from the data for example, if jsonselector = {\"-15\":[[-1]]}, the dataset will be split in 15 parts and each part will be averaged to yield a single histogram (per type) get_golden_mask(self) return a boolean mask on the lumisections whether or not they belong to the golden json get_golden_indices(self) return an array of indices of lumisections that belong to the golden json get_perrun_indices(self) return a list of arrays of indices of lumisections, one element in the list represents one run get_mse_array(histstruct,valkey,dims=[]) (no valid documentation found) fitseminormal(histstruct,valkey,dims=[],fitnew=True,savefit=False) (no valid documentation found) fitgaussiankde(histstruct,valkey,dims=[],maxnpoints=-1) (no valid documentation found) plotfit2d(histstruct,valkey,dims,fitfunc,doinitialplot=True,onlycontour=False,rangestd=30) (no valid documentation found) msenormalizer (no valid documentation found) init (self) (no valid documentation found) fit(self,array) (no valid documentation found) apply(self,array) (no valid documentation found)","title":"histstructure"},{"location":"utils/ae_combine_utils/#histstructure","text":"(no valid documentation found)","title":"histstructure"},{"location":"utils/ae_combine_utils/#initself","text":"(no valid documentation found)","title":"init(self)"},{"location":"utils/ae_combine_utils/#createselfyearhistnamesjsonselectornonehighstatonlyfalsedcsononlyfalse","text":"create the histstructure given the arguments provided most arguments are self-explanatory remarks: - if jsonselector is None, no selection will be done on run/ls number, i.e. all runs and lumisections are kept - if jsonselector contains a single negative run number as key, templates will be used (e.g. averaging the dataset) instead of actual ls from the data for example, if jsonselector = {\"-15\":[[-1]]}, the dataset will be split in 15 parts and each part will be averaged to yield a single histogram (per type)","title":"create(self,year,histnames,jsonselector=None,highstatonly=False,dcsononly=False)"},{"location":"utils/ae_combine_utils/#get_golden_maskself","text":"return a boolean mask on the lumisections whether or not they belong to the golden json","title":"get_golden_mask(self)"},{"location":"utils/ae_combine_utils/#get_golden_indicesself","text":"return an array of indices of lumisections that belong to the golden json","title":"get_golden_indices(self)"},{"location":"utils/ae_combine_utils/#get_perrun_indicesself","text":"return a list of arrays of indices of lumisections, one element in the list represents one run","title":"get_perrun_indices(self)"},{"location":"utils/ae_combine_utils/#get_mse_arrayhiststructvalkeydims","text":"(no valid documentation found)","title":"get_mse_array(histstruct,valkey,dims=[])"},{"location":"utils/ae_combine_utils/#fitseminormalhiststructvalkeydimsfitnewtruesavefitfalse","text":"(no valid documentation found)","title":"fitseminormal(histstruct,valkey,dims=[],fitnew=True,savefit=False)"},{"location":"utils/ae_combine_utils/#fitgaussiankdehiststructvalkeydimsmaxnpoints-1","text":"(no valid documentation found)","title":"fitgaussiankde(histstruct,valkey,dims=[],maxnpoints=-1)"},{"location":"utils/ae_combine_utils/#plotfit2dhiststructvalkeydimsfitfuncdoinitialplottrueonlycontourfalserangestd30","text":"(no valid documentation found)","title":"plotfit2d(histstruct,valkey,dims,fitfunc,doinitialplot=True,onlycontour=False,rangestd=30)"},{"location":"utils/ae_combine_utils/#msenormalizer","text":"(no valid documentation found)","title":"msenormalizer"},{"location":"utils/ae_combine_utils/#initself_1","text":"(no valid documentation found)","title":"init(self)"},{"location":"utils/ae_combine_utils/#fitselfarray","text":"(no valid documentation found)","title":"fit(self,array)"},{"location":"utils/ae_combine_utils/#applyselfarray","text":"(no valid documentation found)","title":"apply(self,array)"},{"location":"utils/autoencoder_utils/","text":"mseTop10(y_true, y_pred) (no valid documentation found) mseTop10Raw(y_true, y_pred) same as above but without using tf or K the version including tf or K seemed to cause randomly dying kernels, no clear reason could be found, but it was solved using this loss function instead. verified that it gives exactly the same output as the function above on some random arrays does only work for arrays with 2D shapes, not for (nbins,) mseTopNRaw(y_true, y_pred, n=10) generalization of the above chiSquared(y_true, y_pred) (no valid documentation found) chiSquaredTop10(y_true, y_pred) (no valid documentation found) get_roc(scores, labels, mode='classic', doplot=True) make a ROC curve input arguments: - scores is a 1D numpy array containing output scores of any algorithm - labels is a 1D numpy array (equally long as scores) containing labels note that 1 for signal and 0 for background is assumed! this convention is only used to define what scores belong to signal or background; the scores itself can be anything (not limited to (0,1)), as long as the target for signal is higher than the target for background - mode: how to plot the roc curve; options are: - 'classic' = signal efficiency afo background efficiency - doplot: boolean whether to make a plot or simply return the auc. get_roc_from_hists(hists, labels, predicted_hists, mode='classic', doplot=True) make a ROC curve without manually calculating the scores the output score is the mse between the histograms and their reconstruction hists and predicted_hists are 2D numpy arrays of shape (nhistograms,nbins) other arguments: see get_roc get_confusion_matrix(scores, labels, wp) plot a confusion matrix scores and labels are defined in the same way as for get_roc wp is the chosen working point (i.e. any score above wp is flagged as signal, any below is flagged as background) get_confusion_matrix_from_hists(hists, labels, predicted_hists, msewp) plot a confusion matrix without manually calculating the scores the output score is the mse between the histograms and their reconstruction getautoencoder(input_size,arch,act=[],opt='adam',loss=mseTop10) get a trainable autoencoder model input args: - input_size: size of vector that autoencoder will operate on - arch: list of number of nodes per hidden layer (excluding input and output layer) - act: list of activations per layer (default: tanh) - opt: optimizer to use (default: adam) - loss: loss function to use (defualt: mseTop10) train_simple_autoencoder(hists,nepochs=-1,modelname='') create and train a very simple keras model the model consists of one hidden layer (with half as many units as there are input bins), tanh activation, adam optimizer and mseTop10 loss. input args: - hists is a 2D numpy array of shape (nhistograms, nbins) - nepochs is the number of epochs to use (has a default value if left unspecified) - modelname is a file name to save the model in (default: model is not saved to a file)","title":"mseTop10(y_true, y_pred)"},{"location":"utils/autoencoder_utils/#msetop10y_true-y_pred","text":"(no valid documentation found)","title":"mseTop10(y_true, y_pred)"},{"location":"utils/autoencoder_utils/#msetop10rawy_true-y_pred","text":"same as above but without using tf or K the version including tf or K seemed to cause randomly dying kernels, no clear reason could be found, but it was solved using this loss function instead. verified that it gives exactly the same output as the function above on some random arrays does only work for arrays with 2D shapes, not for (nbins,)","title":"mseTop10Raw(y_true, y_pred)"},{"location":"utils/autoencoder_utils/#msetopnrawy_true-y_pred-n10","text":"generalization of the above","title":"mseTopNRaw(y_true, y_pred, n=10)"},{"location":"utils/autoencoder_utils/#chisquaredy_true-y_pred","text":"(no valid documentation found)","title":"chiSquared(y_true, y_pred)"},{"location":"utils/autoencoder_utils/#chisquaredtop10y_true-y_pred","text":"(no valid documentation found)","title":"chiSquaredTop10(y_true, y_pred)"},{"location":"utils/autoencoder_utils/#get_rocscores-labels-modeclassic-doplottrue","text":"make a ROC curve input arguments: - scores is a 1D numpy array containing output scores of any algorithm - labels is a 1D numpy array (equally long as scores) containing labels note that 1 for signal and 0 for background is assumed! this convention is only used to define what scores belong to signal or background; the scores itself can be anything (not limited to (0,1)), as long as the target for signal is higher than the target for background - mode: how to plot the roc curve; options are: - 'classic' = signal efficiency afo background efficiency - doplot: boolean whether to make a plot or simply return the auc.","title":"get_roc(scores, labels, mode='classic', doplot=True)"},{"location":"utils/autoencoder_utils/#get_roc_from_histshists-labels-predicted_hists-modeclassic-doplottrue","text":"make a ROC curve without manually calculating the scores the output score is the mse between the histograms and their reconstruction hists and predicted_hists are 2D numpy arrays of shape (nhistograms,nbins) other arguments: see get_roc","title":"get_roc_from_hists(hists, labels, predicted_hists, mode='classic', doplot=True)"},{"location":"utils/autoencoder_utils/#get_confusion_matrixscores-labels-wp","text":"plot a confusion matrix scores and labels are defined in the same way as for get_roc wp is the chosen working point (i.e. any score above wp is flagged as signal, any below is flagged as background)","title":"get_confusion_matrix(scores, labels, wp)"},{"location":"utils/autoencoder_utils/#get_confusion_matrix_from_histshists-labels-predicted_hists-msewp","text":"plot a confusion matrix without manually calculating the scores the output score is the mse between the histograms and their reconstruction","title":"get_confusion_matrix_from_hists(hists, labels, predicted_hists, msewp)"},{"location":"utils/autoencoder_utils/#getautoencoderinput_sizearchactoptadamlossmsetop10","text":"get a trainable autoencoder model input args: - input_size: size of vector that autoencoder will operate on - arch: list of number of nodes per hidden layer (excluding input and output layer) - act: list of activations per layer (default: tanh) - opt: optimizer to use (default: adam) - loss: loss function to use (defualt: mseTop10)","title":"getautoencoder(input_size,arch,act=[],opt='adam',loss=mseTop10)"},{"location":"utils/autoencoder_utils/#train_simple_autoencoderhistsnepochs-1modelname","text":"create and train a very simple keras model the model consists of one hidden layer (with half as many units as there are input bins), tanh activation, adam optimizer and mseTop10 loss. input args: - hists is a 2D numpy array of shape (nhistograms, nbins) - nepochs is the number of epochs to use (has a default value if left unspecified) - modelname is a file name to save the model in (default: model is not saved to a file)","title":"train_simple_autoencoder(hists,nepochs=-1,modelname='')"},{"location":"utils/clustering_utils/","text":"fitfunction abstract base class for all fit functions all other fit functions inherit from fitfunction and overload its functions no concrete fitting procedure is implemented, but some basic checks on dimensionality are performed init (self,points) (no valid documentation found) pdf(self,points) get the pdf (probability density function) value at given points points is a 2D numpy array of shape (npoints,ndims) the output is a 1D array of shape (npoints) pdfgrid(self,grid) get the pdf (probability density function) value at a given grid (only applicable to 2D case!) grid is a np array of shape (nx,ny,2) containing the x- and y-values in its first and second depth-wise dimension respectively. the grid is typically (but not necessarily) created via: x,y = np.mgrid[ , ] grid = np.dstack(x,y) lognormal(fitfunction) (no valid documentation found) init (self,points) points is a np array of shape (npoints,ndims) pdf(self,points) (no valid documentation found) pdfgrid(self,grid) (no valid documentation found) exponential(fitfunction) (no valid documentation found) init (self,points) points is a np array of shape (npoints,ndims) pdf(self,points) (no valid documentation found) pdfgrid(self,grid) (no valid documentation found) seminormal(fitfunction) this is not strictly speaking a probability distribution, only the first quadrant of the result of fitting a normal distribution to the data + its mirror image wrt the origin init (self,points=[]) (no valid documentation found) pdf(self,points) (no valid documentation found) pdfgrid(self,grid) (no valid documentation found) save(self,path) (no valid documentation found) load(self,path) (no valid documentation found) gaussiankde(fitfunction) wrapper for scipy.stats.gaussian_kde (gaussian kernel density estimation) init (self,points=[],bw='default') (no valid documentation found) pdf(self,points) (no valid documentation found) pdfgrid(self,grid) (no valid documentation found) vecdist(moments,index) does not work well if there are outliers which dominate the distance costhetadist(moments,index) works more or less but not all bad points have small values, allows to identify problematic regions but not individual LS avgnndist(moments,index,nn) seems to work well for the runs tested! getavgnndist(hists,nmoments,xmin,xmax,nbins,nneighbours) (no valid documentation found) filteranomalous(df,nmoments=3,rmouterflow=True,rmlargest=0.,doplot=True,) (no valid documentation found)","title":"fitfunction"},{"location":"utils/clustering_utils/#fitfunction","text":"abstract base class for all fit functions all other fit functions inherit from fitfunction and overload its functions no concrete fitting procedure is implemented, but some basic checks on dimensionality are performed","title":"fitfunction"},{"location":"utils/clustering_utils/#initselfpoints","text":"(no valid documentation found)","title":"init(self,points)"},{"location":"utils/clustering_utils/#pdfselfpoints","text":"get the pdf (probability density function) value at given points points is a 2D numpy array of shape (npoints,ndims) the output is a 1D array of shape (npoints)","title":"pdf(self,points)"},{"location":"utils/clustering_utils/#pdfgridselfgrid","text":"get the pdf (probability density function) value at a given grid (only applicable to 2D case!) grid is a np array of shape (nx,ny,2) containing the x- and y-values in its first and second depth-wise dimension respectively. the grid is typically (but not necessarily) created via: x,y = np.mgrid[ , ] grid = np.dstack(x,y)","title":"pdfgrid(self,grid)"},{"location":"utils/clustering_utils/#lognormalfitfunction","text":"(no valid documentation found)","title":"lognormal(fitfunction)"},{"location":"utils/clustering_utils/#initselfpoints_1","text":"points is a np array of shape (npoints,ndims)","title":"init(self,points)"},{"location":"utils/clustering_utils/#pdfselfpoints_1","text":"(no valid documentation found)","title":"pdf(self,points)"},{"location":"utils/clustering_utils/#pdfgridselfgrid_1","text":"(no valid documentation found)","title":"pdfgrid(self,grid)"},{"location":"utils/clustering_utils/#exponentialfitfunction","text":"(no valid documentation found)","title":"exponential(fitfunction)"},{"location":"utils/clustering_utils/#initselfpoints_2","text":"points is a np array of shape (npoints,ndims)","title":"init(self,points)"},{"location":"utils/clustering_utils/#pdfselfpoints_2","text":"(no valid documentation found)","title":"pdf(self,points)"},{"location":"utils/clustering_utils/#pdfgridselfgrid_2","text":"(no valid documentation found)","title":"pdfgrid(self,grid)"},{"location":"utils/clustering_utils/#seminormalfitfunction","text":"this is not strictly speaking a probability distribution, only the first quadrant of the result of fitting a normal distribution to the data + its mirror image wrt the origin","title":"seminormal(fitfunction)"},{"location":"utils/clustering_utils/#initselfpoints_3","text":"(no valid documentation found)","title":"init(self,points=[])"},{"location":"utils/clustering_utils/#pdfselfpoints_3","text":"(no valid documentation found)","title":"pdf(self,points)"},{"location":"utils/clustering_utils/#pdfgridselfgrid_3","text":"(no valid documentation found)","title":"pdfgrid(self,grid)"},{"location":"utils/clustering_utils/#saveselfpath","text":"(no valid documentation found)","title":"save(self,path)"},{"location":"utils/clustering_utils/#loadselfpath","text":"(no valid documentation found)","title":"load(self,path)"},{"location":"utils/clustering_utils/#gaussiankdefitfunction","text":"wrapper for scipy.stats.gaussian_kde (gaussian kernel density estimation)","title":"gaussiankde(fitfunction)"},{"location":"utils/clustering_utils/#initselfpointsbwdefault","text":"(no valid documentation found)","title":"init(self,points=[],bw='default')"},{"location":"utils/clustering_utils/#pdfselfpoints_4","text":"(no valid documentation found)","title":"pdf(self,points)"},{"location":"utils/clustering_utils/#pdfgridselfgrid_4","text":"(no valid documentation found)","title":"pdfgrid(self,grid)"},{"location":"utils/clustering_utils/#vecdistmomentsindex","text":"does not work well if there are outliers which dominate the distance","title":"vecdist(moments,index)"},{"location":"utils/clustering_utils/#costhetadistmomentsindex","text":"works more or less but not all bad points have small values, allows to identify problematic regions but not individual LS","title":"costhetadist(moments,index)"},{"location":"utils/clustering_utils/#avgnndistmomentsindexnn","text":"seems to work well for the runs tested!","title":"avgnndist(moments,index,nn)"},{"location":"utils/clustering_utils/#getavgnndisthistsnmomentsxminxmaxnbinsnneighbours","text":"(no valid documentation found)","title":"getavgnndist(hists,nmoments,xmin,xmax,nbins,nneighbours)"},{"location":"utils/clustering_utils/#filteranomalousdfnmoments3rmouterflowtruermlargest0doplottrue","text":"(no valid documentation found)","title":"filteranomalous(df,nmoments=3,rmouterflow=True,rmlargest=0.,doplot=True,)"},{"location":"utils/csv_utils/","text":"get_data_dirs(year='2017',eras=[],dim=1) yield all data directories note that the location of the data is hard-coded; this function might break for newer or later reprocessings of the data. - year is a string, either '2017' or '2018' - era is a list containing a selection of era names (default empty list = all eras) - dim is either 1 or 2 (for 1D or 2D plots) get_csv_files(inputdir) yields paths to all csv files in input directory note that the output paths consist of input_dir/filename this function is only meant for 1-level down searching, i.e. the .csv files listed directly under input_dir. sort_filenames(filelist) sort filenames in numerical order (e.g. 2 before 10) note that the number is supposed to be in ..._ . format read_csv(csv_file) read csv file into pandas dataframe csv_file is the path to the csv file to be read read_and_merge_csv(csv_files,histnames=[],runnbs=[]) read and merge list of csv files into a single df csv_files is a list of paths to files to merge into a df histnames is a list of the types of histograms to keep (default: all) runnbs is a list of run numbers to keep (default: all) write_skimmed_csv(histnames,year,eras=['all']) read all available data for a given year/era and make a file per histogram type input arguments: - histnames: list of histogram names for which to make a separate file - year: data-taking year (in string format) - eras: data-taking eras for which to make a separate file (in string format) use 'all' to make a file with all eras merged, i.e. a full data taking year output: - one csv file per year/era and per histogram type note: this function can take quite a while to run!","title":"get_data_dirs(year='2017',eras=[],dim=1)"},{"location":"utils/csv_utils/#get_data_dirsyear2017erasdim1","text":"yield all data directories note that the location of the data is hard-coded; this function might break for newer or later reprocessings of the data. - year is a string, either '2017' or '2018' - era is a list containing a selection of era names (default empty list = all eras) - dim is either 1 or 2 (for 1D or 2D plots)","title":"get_data_dirs(year='2017',eras=[],dim=1)"},{"location":"utils/csv_utils/#get_csv_filesinputdir","text":"yields paths to all csv files in input directory note that the output paths consist of input_dir/filename this function is only meant for 1-level down searching, i.e. the .csv files listed directly under input_dir.","title":"get_csv_files(inputdir)"},{"location":"utils/csv_utils/#sort_filenamesfilelist","text":"sort filenames in numerical order (e.g. 2 before 10) note that the number is supposed to be in ..._ . format","title":"sort_filenames(filelist)"},{"location":"utils/csv_utils/#read_csvcsv_file","text":"read csv file into pandas dataframe csv_file is the path to the csv file to be read","title":"read_csv(csv_file)"},{"location":"utils/csv_utils/#read_and_merge_csvcsv_fileshistnamesrunnbs","text":"read and merge list of csv files into a single df csv_files is a list of paths to files to merge into a df histnames is a list of the types of histograms to keep (default: all) runnbs is a list of run numbers to keep (default: all)","title":"read_and_merge_csv(csv_files,histnames=[],runnbs=[])"},{"location":"utils/csv_utils/#write_skimmed_csvhistnamesyearerasall","text":"read all available data for a given year/era and make a file per histogram type input arguments: - histnames: list of histogram names for which to make a separate file - year: data-taking year (in string format) - eras: data-taking eras for which to make a separate file (in string format) use 'all' to make a file with all eras merged, i.e. a full data taking year output: - one csv file per year/era and per histogram type note: this function can take quite a while to run!","title":"write_skimmed_csv(histnames,year,eras=['all'])"},{"location":"utils/dataframe_utils/","text":"get_histnames(df) get a list of (unique) histogram names present in a df df is a dataframe read from an input csv file. select_histnames(df,histnames) keep only a subset of histograms in a df histnames is a list of histogram names to keep in the df. get_runs(df) return a list of (unique) run numbers present in a df df is a dataframe read from an input csv file. select_runs(df,runnbs) keep only a subset of runs in a df runnbs is a list of run numbers to keep in the df. get_ls(df) return a list of ls numbers present in a df note that the numbers are not required to be unique! note: no check is done on the run number! select_ls(df,lsnbs) keep only a subset of lumisection numbers in a df lsnbs is a list of lumisection numbers to keep in the df. note: no check is done on the run number! get_runsls(df) return a dictionary with runs and lumisections in a dataframe (same format as e.g. golden json) select_json(df,jsonfile) keep only lumisections that are in the given json file select_runsls(df,jsondict) equivalent to select_json but using a pre-loaded json dict instead of a json file on disk select_golden(df) keep only golden lumisections in df select_notgolden(df) keep all but golden lumisections in df select_dcson(df) keep only lumisections in df that have DCS-bit on select_dcsoff(df) keep only lumisections in df that have DCS-bit off select_pixelgood(df) keep only lumisections in df that are in good pixel json select_pixelbad(df) keep only lumisections in df that are in bad pixel json get_highstat(df,entries_to_bins_ratio=100) return a select object of runs and ls of histograms with high statistics select_highstat(df,entries_to_bins_ratio=100) (no valid documentation found) get_hist_values(df) same as builtin \"df['histo'].values\" but convert strings to np arrays also an array of run and LS numbers is returned warning: no check is done to assure that all histograms are of the same type!","title":"get_histnames(df)"},{"location":"utils/dataframe_utils/#get_histnamesdf","text":"get a list of (unique) histogram names present in a df df is a dataframe read from an input csv file.","title":"get_histnames(df)"},{"location":"utils/dataframe_utils/#select_histnamesdfhistnames","text":"keep only a subset of histograms in a df histnames is a list of histogram names to keep in the df.","title":"select_histnames(df,histnames)"},{"location":"utils/dataframe_utils/#get_runsdf","text":"return a list of (unique) run numbers present in a df df is a dataframe read from an input csv file.","title":"get_runs(df)"},{"location":"utils/dataframe_utils/#select_runsdfrunnbs","text":"keep only a subset of runs in a df runnbs is a list of run numbers to keep in the df.","title":"select_runs(df,runnbs)"},{"location":"utils/dataframe_utils/#get_lsdf","text":"return a list of ls numbers present in a df note that the numbers are not required to be unique! note: no check is done on the run number!","title":"get_ls(df)"},{"location":"utils/dataframe_utils/#select_lsdflsnbs","text":"keep only a subset of lumisection numbers in a df lsnbs is a list of lumisection numbers to keep in the df. note: no check is done on the run number!","title":"select_ls(df,lsnbs)"},{"location":"utils/dataframe_utils/#get_runslsdf","text":"return a dictionary with runs and lumisections in a dataframe (same format as e.g. golden json)","title":"get_runsls(df)"},{"location":"utils/dataframe_utils/#select_jsondfjsonfile","text":"keep only lumisections that are in the given json file","title":"select_json(df,jsonfile)"},{"location":"utils/dataframe_utils/#select_runslsdfjsondict","text":"equivalent to select_json but using a pre-loaded json dict instead of a json file on disk","title":"select_runsls(df,jsondict)"},{"location":"utils/dataframe_utils/#select_goldendf","text":"keep only golden lumisections in df","title":"select_golden(df)"},{"location":"utils/dataframe_utils/#select_notgoldendf","text":"keep all but golden lumisections in df","title":"select_notgolden(df)"},{"location":"utils/dataframe_utils/#select_dcsondf","text":"keep only lumisections in df that have DCS-bit on","title":"select_dcson(df)"},{"location":"utils/dataframe_utils/#select_dcsoffdf","text":"keep only lumisections in df that have DCS-bit off","title":"select_dcsoff(df)"},{"location":"utils/dataframe_utils/#select_pixelgooddf","text":"keep only lumisections in df that are in good pixel json","title":"select_pixelgood(df)"},{"location":"utils/dataframe_utils/#select_pixelbaddf","text":"keep only lumisections in df that are in bad pixel json","title":"select_pixelbad(df)"},{"location":"utils/dataframe_utils/#get_highstatdfentries_to_bins_ratio100","text":"return a select object of runs and ls of histograms with high statistics","title":"get_highstat(df,entries_to_bins_ratio=100)"},{"location":"utils/dataframe_utils/#select_highstatdfentries_to_bins_ratio100","text":"(no valid documentation found)","title":"select_highstat(df,entries_to_bins_ratio=100)"},{"location":"utils/dataframe_utils/#get_hist_valuesdf","text":"same as builtin \"df['histo'].values\" but convert strings to np arrays also an array of run and LS numbers is returned warning: no check is done to assure that all histograms are of the same type!","title":"get_hist_values(df)"},{"location":"utils/generate_data_utils/","text":"goodnoise(nbins, fstd=None) generate one sample of 'good' noise consisting of fourier components input args: - nbins: number of bins, length of noise array to be sampled - fstd: an array of length nbins used for scaling of the amplitude of the noise bin-by-bin. output: - numpy array of length nbins containing the noise badnoise(nbins,fstd=None) generate one sample of 'bad' noise consisting of fourier components (higher frequency and amplitude than 'good' noise) input args and output: simlar to goodnoise WARNING: NOT NECESSARILY REPRESENTATIVE OF ANOMALIES TO BE EXPECTED, DO NOT USE whitenoise(nbins,fstd=None) generate one sample of white noise (uncorrelated between bins) input args and output: similar to goodnoise random_lico(hists) generate one linear combination of histograms with random coefficients in (0,1) summing to 1 input args: - numpy array of shape (nhists,nbins), the rows of which will be linearly combined output: - numpy array of shape (nbins), containing the new histogram smoother(inarray,halfwidth) smooth the rows of a 2D array using the 2*halfwidth+1 surrounding values. mse_correlation_vector(hists,index) calculate mse of a histogram at given index wrt all other histograms input args: - hists: numpy array of shape (nhists,nbins) containing the histograms - index: the index (must be in (0,len(hists)-1)) of the histogram in question output: - numpy array of length nhists containing mse of the indexed histogram with respect to all other histograms WARNING: can be slow if called many times on a large collection of histograms with many bins. moments_correlation_vector(moments,index) calculate moment distance of hist at index wrt all other hists very similar to mse_correlation_vector but using histogram moments instead of full histograms for speed-up plot_data_and_gen(nplot,datahist,genhist,figname='fig.png') plot a couple of random examples from rhist (data), ghist (resampled 'good') and bhist (resampled 'bad') input arguments: - nplot: integer, maximum number of examples to plot - datahist, genhist: numpy arrays of shape (nhists,nbins) - figname: name of figure to plot plot_seed_and_gen(seedhist,genhist,figname='fig.png') plot a couple of random examples from rhist (data), ghist (resampled 'good') and bhist (resampled 'bad') input arguments: - datahist, genhist: numpy arrays of shape (nhists,nbins) - figname: name of figure to plot plot_noise(noise,histstd=None,figname='fig.png') plot histograms in noise (numpy array of shape (nhists,nbins)) optional argument histstd plots +- histstd as boundaries fourier_noise_on_mean(hists,outfilename='',figname='',nresamples=0,nonnegative=True) apply fourier noise on the bin-per-bin mean histogram, with amplitude scaling based on bin-per-bin std histogram. input args: - hists: numpy array of shape (nhists,nbins) used for determining mean and std - outfilename: path to csv file to write results to (default: no writing) - figname: path to figure plotting examples (default: no plotting) - nresamples: number of samples to draw (default: number of input histograms / 10) - nonnegative: boolean whether to set all bins to minimum zero after applying noise MOSTLY SUITABLE AS HELP FUNCTION FOR RESAMPLE_SIMILAR_FOURIER_NOISE, NOT AS GENERATOR IN ITSELF fourier_noise(hists,outfilename='',figname='',nresamples=1,nonnegative=True,stdfactor=15.) apply fourier noise on random histograms with simple flat amplitude scaling. input args: - hists: numpy array of shape (nhists,nbins) used for seeding - outfilename: path to csv file to write results to (default: no writing) - figname: path to figure plotting examples (default: no plotting) - nresamples: number of samples to draw per input histogram - nonnegative: boolean whether to set all bins to minimum zero after applying noise - stdfactor: factor to scale magnitude of noise (larger factor = smaller noise) upsample_hist_set(hists,ntarget,fourierstdfactor=15.,figname='f') (no valid documentation found) white_noise(hists,figname='',stdfactor=15.) apply white noise to the histograms in hists. input args: - hists: np array (nhists,nbins) containing input histograms - figname: path to figure plotting examples (default: no plotting) - stdfactor: scaling factor of white noise amplitude (higher factor = smaller noise) resample_bin_per_bin(hists,outfilename='',figname='',nresamples=0,nonnegative=True,smoothinghalfwidth=2) do resampling from bin-per-bin probability distributions input args: - hists: np array (nhists,nbins) containing the histograms to draw new samples from - outfilename: path to csv file to write results to (default: no writing) - figname: path to figure plotting examples (default: no plotting) - nresamples: number of samples to draw (default: 1/10 of number of input histograms) - nonnegative: boolean whether or not to put all bins to minimum zero after applying noise - smoothinghalfwidth: halfwidth of smoothing procedure to apply on the result (default: no smoothing) resample_similar_bin_per_bin( allhists, selhists, outfilename='', figname='', nresamples=1, nonnegative=True, (no valid documentation found) resample_similar_fourier_noise( allhists, selhists, outfilename='', figname='', nresamples=1, nonnegative=True, (no valid documentation found) resample_similar_lico( allhists, selhists, outfilename='', figname='', nresamples=1, nonnegative=True, (no valid documentation found) mc_sampling(hists, nMC=10000 , nresamples=10) resampling of a histogram using MC methods (Marek's method) Drawing random points from a space defined by the range of the histogram in all axes. Points are \"accepted\" if the fall under the sampled histogram: f(x) - sampled distribution x_r, y_r -> randomly sampled point if y_r<=f(x_r), fill the new distribution at bin corresponding to x_r with weight: weight = (sum of input hist)/(#mc points accepted) this is equal to weight = (MC space volume)/(# all MC points)","title":"goodnoise(nbins, fstd=None)"},{"location":"utils/generate_data_utils/#goodnoisenbins-fstdnone","text":"generate one sample of 'good' noise consisting of fourier components input args: - nbins: number of bins, length of noise array to be sampled - fstd: an array of length nbins used for scaling of the amplitude of the noise bin-by-bin. output: - numpy array of length nbins containing the noise","title":"goodnoise(nbins, fstd=None)"},{"location":"utils/generate_data_utils/#badnoisenbinsfstdnone","text":"generate one sample of 'bad' noise consisting of fourier components (higher frequency and amplitude than 'good' noise) input args and output: simlar to goodnoise WARNING: NOT NECESSARILY REPRESENTATIVE OF ANOMALIES TO BE EXPECTED, DO NOT USE","title":"badnoise(nbins,fstd=None)"},{"location":"utils/generate_data_utils/#whitenoisenbinsfstdnone","text":"generate one sample of white noise (uncorrelated between bins) input args and output: similar to goodnoise","title":"whitenoise(nbins,fstd=None)"},{"location":"utils/generate_data_utils/#random_licohists","text":"generate one linear combination of histograms with random coefficients in (0,1) summing to 1 input args: - numpy array of shape (nhists,nbins), the rows of which will be linearly combined output: - numpy array of shape (nbins), containing the new histogram","title":"random_lico(hists)"},{"location":"utils/generate_data_utils/#smootherinarrayhalfwidth","text":"smooth the rows of a 2D array using the 2*halfwidth+1 surrounding values.","title":"smoother(inarray,halfwidth)"},{"location":"utils/generate_data_utils/#mse_correlation_vectorhistsindex","text":"calculate mse of a histogram at given index wrt all other histograms input args: - hists: numpy array of shape (nhists,nbins) containing the histograms - index: the index (must be in (0,len(hists)-1)) of the histogram in question output: - numpy array of length nhists containing mse of the indexed histogram with respect to all other histograms WARNING: can be slow if called many times on a large collection of histograms with many bins.","title":"mse_correlation_vector(hists,index)"},{"location":"utils/generate_data_utils/#moments_correlation_vectormomentsindex","text":"calculate moment distance of hist at index wrt all other hists very similar to mse_correlation_vector but using histogram moments instead of full histograms for speed-up","title":"moments_correlation_vector(moments,index)"},{"location":"utils/generate_data_utils/#plot_data_and_gennplotdatahistgenhistfignamefigpng","text":"plot a couple of random examples from rhist (data), ghist (resampled 'good') and bhist (resampled 'bad') input arguments: - nplot: integer, maximum number of examples to plot - datahist, genhist: numpy arrays of shape (nhists,nbins) - figname: name of figure to plot","title":"plot_data_and_gen(nplot,datahist,genhist,figname='fig.png')"},{"location":"utils/generate_data_utils/#plot_seed_and_genseedhistgenhistfignamefigpng","text":"plot a couple of random examples from rhist (data), ghist (resampled 'good') and bhist (resampled 'bad') input arguments: - datahist, genhist: numpy arrays of shape (nhists,nbins) - figname: name of figure to plot","title":"plot_seed_and_gen(seedhist,genhist,figname='fig.png')"},{"location":"utils/generate_data_utils/#plot_noisenoisehiststdnonefignamefigpng","text":"plot histograms in noise (numpy array of shape (nhists,nbins)) optional argument histstd plots +- histstd as boundaries","title":"plot_noise(noise,histstd=None,figname='fig.png')"},{"location":"utils/generate_data_utils/#fourier_noise_on_meanhistsoutfilenamefignamenresamples0nonnegativetrue","text":"apply fourier noise on the bin-per-bin mean histogram, with amplitude scaling based on bin-per-bin std histogram. input args: - hists: numpy array of shape (nhists,nbins) used for determining mean and std - outfilename: path to csv file to write results to (default: no writing) - figname: path to figure plotting examples (default: no plotting) - nresamples: number of samples to draw (default: number of input histograms / 10) - nonnegative: boolean whether to set all bins to minimum zero after applying noise MOSTLY SUITABLE AS HELP FUNCTION FOR RESAMPLE_SIMILAR_FOURIER_NOISE, NOT AS GENERATOR IN ITSELF","title":"fourier_noise_on_mean(hists,outfilename='',figname='',nresamples=0,nonnegative=True)"},{"location":"utils/generate_data_utils/#fourier_noisehistsoutfilenamefignamenresamples1nonnegativetruestdfactor15","text":"apply fourier noise on random histograms with simple flat amplitude scaling. input args: - hists: numpy array of shape (nhists,nbins) used for seeding - outfilename: path to csv file to write results to (default: no writing) - figname: path to figure plotting examples (default: no plotting) - nresamples: number of samples to draw per input histogram - nonnegative: boolean whether to set all bins to minimum zero after applying noise - stdfactor: factor to scale magnitude of noise (larger factor = smaller noise)","title":"fourier_noise(hists,outfilename='',figname='',nresamples=1,nonnegative=True,stdfactor=15.)"},{"location":"utils/generate_data_utils/#upsample_hist_sethistsntargetfourierstdfactor15fignamef","text":"(no valid documentation found)","title":"upsample_hist_set(hists,ntarget,fourierstdfactor=15.,figname='f')"},{"location":"utils/generate_data_utils/#white_noisehistsfignamestdfactor15","text":"apply white noise to the histograms in hists. input args: - hists: np array (nhists,nbins) containing input histograms - figname: path to figure plotting examples (default: no plotting) - stdfactor: scaling factor of white noise amplitude (higher factor = smaller noise)","title":"white_noise(hists,figname='',stdfactor=15.)"},{"location":"utils/generate_data_utils/#resample_bin_per_binhistsoutfilenamefignamenresamples0nonnegativetruesmoothinghalfwidth2","text":"do resampling from bin-per-bin probability distributions input args: - hists: np array (nhists,nbins) containing the histograms to draw new samples from - outfilename: path to csv file to write results to (default: no writing) - figname: path to figure plotting examples (default: no plotting) - nresamples: number of samples to draw (default: 1/10 of number of input histograms) - nonnegative: boolean whether or not to put all bins to minimum zero after applying noise - smoothinghalfwidth: halfwidth of smoothing procedure to apply on the result (default: no smoothing)","title":"resample_bin_per_bin(hists,outfilename='',figname='',nresamples=0,nonnegative=True,smoothinghalfwidth=2)"},{"location":"utils/generate_data_utils/#resample_similar_bin_per_bin-allhists-selhists-outfilename-figname-nresamples1-nonnegativetrue","text":"(no valid documentation found)","title":"resample_similar_bin_per_bin( allhists, selhists, outfilename='', figname='', nresamples=1, nonnegative=True,"},{"location":"utils/generate_data_utils/#resample_similar_fourier_noise-allhists-selhists-outfilename-figname-nresamples1-nonnegativetrue","text":"(no valid documentation found)","title":"resample_similar_fourier_noise( allhists, selhists, outfilename='', figname='', nresamples=1, nonnegative=True,"},{"location":"utils/generate_data_utils/#resample_similar_lico-allhists-selhists-outfilename-figname-nresamples1-nonnegativetrue","text":"(no valid documentation found)","title":"resample_similar_lico( allhists, selhists, outfilename='', figname='', nresamples=1, nonnegative=True,"},{"location":"utils/generate_data_utils/#mc_samplinghists-nmc10000-nresamples10","text":"resampling of a histogram using MC methods (Marek's method) Drawing random points from a space defined by the range of the histogram in all axes. Points are \"accepted\" if the fall under the sampled histogram: f(x) - sampled distribution x_r, y_r -> randomly sampled point if y_r<=f(x_r), fill the new distribution at bin corresponding to x_r with weight: weight = (sum of input hist)/(#mc points accepted) this is equal to weight = (MC space volume)/(# all MC points)","title":"mc_sampling(hists, nMC=10000 , nresamples=10)"},{"location":"utils/hist_utils/","text":"rebinhists(hists,factor) perform rebinning on a set of histograms hists is a numpy array of shape (nhistograms,nbins) factor is the rebinning factor, which must be a divisor of nbins. normalizehists(hists) perform normalization (i.e. sum of bin contents equals one for each histogram) averagehists(hists,nout) partition hists (of shape (nhistograms,nbins)) into nout parts and take the average histogram of each part moment(bins,counts,order) get n-th central moment of a histogram - bins is a 1D or 2D np array holding the bin centers (shape (nbins) or (nhistograms,nbins)) - array is a 2D np array containing the bin counts (shape (nhistograms,nbins)) - order is the order of the moment to calculate (0 = maximum, 1 = mean value) histmean(bins,counts) special case of moment calculation histrms(bins,counts) special case of moment calculation histmoments(bins,counts,orders) apply moment calculation for a list of orders the return type is a numpy array of shape (nhistograms,nmoments) preparedatafromnpy(dataname, rebinningfactor=1, donormalize=True, doplot=False) read a .npy file and output the histograms preparedatafromdf(df, returnrunls=False, onlygolden=False, rebinningfactor=1, donormalize=True, doplot=False) prepare the data contained in a dataframe in the form of a numpy array args: - returnrunls: wether to return only a histogram array or 1D arrays of run and lumisection numbers as well - onlygolden: if True, only lumisections in the golden json file are kept - rebinningfactor: an integer number to downsample the histograms in the dataframe - donormalize: if True, data are normalized - doplot: if True, some example plots are made showing the histograms preparedatafromcsv(dataname, returnrunls=False, onlygolden=False, rebinningfactor=1, donormalize=True, doplot=False) prepare the data contained in a dataframe csv file in the form of a numpy array args: - returnrunls: wether to return only a histogram array or 1D arrays of run and lumisection numbers as well - onlygolden: if True, only lumisections in the golden json file are kept - rebinningfactor: an integer number to downsample the histograms in the dataframe - doplot: if True, some example plots are made showing the histograms","title":"rebinhists(hists,factor)"},{"location":"utils/hist_utils/#rebinhistshistsfactor","text":"perform rebinning on a set of histograms hists is a numpy array of shape (nhistograms,nbins) factor is the rebinning factor, which must be a divisor of nbins.","title":"rebinhists(hists,factor)"},{"location":"utils/hist_utils/#normalizehistshists","text":"perform normalization (i.e. sum of bin contents equals one for each histogram)","title":"normalizehists(hists)"},{"location":"utils/hist_utils/#averagehistshistsnout","text":"partition hists (of shape (nhistograms,nbins)) into nout parts and take the average histogram of each part","title":"averagehists(hists,nout)"},{"location":"utils/hist_utils/#momentbinscountsorder","text":"get n-th central moment of a histogram - bins is a 1D or 2D np array holding the bin centers (shape (nbins) or (nhistograms,nbins)) - array is a 2D np array containing the bin counts (shape (nhistograms,nbins)) - order is the order of the moment to calculate (0 = maximum, 1 = mean value)","title":"moment(bins,counts,order)"},{"location":"utils/hist_utils/#histmeanbinscounts","text":"special case of moment calculation","title":"histmean(bins,counts)"},{"location":"utils/hist_utils/#histrmsbinscounts","text":"special case of moment calculation","title":"histrms(bins,counts)"},{"location":"utils/hist_utils/#histmomentsbinscountsorders","text":"apply moment calculation for a list of orders the return type is a numpy array of shape (nhistograms,nmoments)","title":"histmoments(bins,counts,orders)"},{"location":"utils/hist_utils/#preparedatafromnpydataname-rebinningfactor1-donormalizetrue-doplotfalse","text":"read a .npy file and output the histograms","title":"preparedatafromnpy(dataname, rebinningfactor=1, donormalize=True, doplot=False)"},{"location":"utils/hist_utils/#preparedatafromdfdf-returnrunlsfalse-onlygoldenfalse-rebinningfactor1-donormalizetrue-doplotfalse","text":"prepare the data contained in a dataframe in the form of a numpy array args: - returnrunls: wether to return only a histogram array or 1D arrays of run and lumisection numbers as well - onlygolden: if True, only lumisections in the golden json file are kept - rebinningfactor: an integer number to downsample the histograms in the dataframe - donormalize: if True, data are normalized - doplot: if True, some example plots are made showing the histograms","title":"preparedatafromdf(df, returnrunls=False, onlygolden=False, rebinningfactor=1, donormalize=True, doplot=False)"},{"location":"utils/hist_utils/#preparedatafromcsvdataname-returnrunlsfalse-onlygoldenfalse-rebinningfactor1-donormalizetrue-doplotfalse","text":"prepare the data contained in a dataframe csv file in the form of a numpy array args: - returnrunls: wether to return only a histogram array or 1D arrays of run and lumisection numbers as well - onlygolden: if True, only lumisections in the golden json file are kept - rebinningfactor: an integer number to downsample the histograms in the dataframe - doplot: if True, some example plots are made showing the histograms","title":"preparedatafromcsv(dataname, returnrunls=False, onlygolden=False, rebinningfactor=1, donormalize=True, doplot=False)"},{"location":"utils/json_utils/","text":"loadjson( jsonfile ) load the content of a json file into a python object input arguments: - jsonfile: the name (or full path if needed) to the json file to be read output: - an dict object as specified in the note below note: the json file is supposed to contain an object like this example: { \"294927\": [ [ 55,85 ], [ 95,105] ], \"294928\": [ [1,33 ] ] } although no explicit checking is done in this function, objects that don't have this structure will probably lead to errors further in the code writejson( jsondict, outputfile, overwrite=False ) inverse function of loadjson input arguments - jsondict: dict object to be written to a json file - outputfile: output file to be written, extension '.json' will be appended automatically - overwrite: boolean whether to overwrite outputfile if it exists (default: throw exception) injson_single( run, lumi, jsondict ) helper function for injson, only for internal use input arguments: - run and lumi are integers - jsondict is an object loaded from a json file output: - boolean whether the run/lumi combination is in the json dict injson( run, lumi, jsonfile=None, jsondict=None ) find if a run and lumi combination is in a given json file input arguments: - run and lumi: integers or (equally long) arrays of integers - jsonfile: a path to a json file - jsondict: a dict loaded from a json file note: either jsonfile or jsondict must not be None! output: boolean or array of booleans (depending on run and lumi) isgolden(run,lumi) find if a run and lumi combination is in the golden json file input arguments: - run and lumi: either integers or (equally long) arrays of integers isdcson(run,lumi) find if a run and lumi combination is in DCS-only json file input arguments: - run and lumi: either integers or (equally long) arrays of integers ispixelgood(run,lumi) find if a run and lumi combination is in the json with good pixel flag note: this json was custom generated in run regisitry and not official! ispixelbad(run,lumi) find if a run and lumi combination is in the json with bad pixel flag note: this json was custom generated in run registry and not official! note: not simply the negation of ispixelgood! json has more relaxed conditions on DCS-like criteria. plainlist_to_rangelist( plainlist ) helper function for tuplelist_to_jsondict, only for internal use input arguments: - plainlist: a list of integers in increasing order, must have length >= 2 output: - a list lists representing ranges example: [1,2,3,5,6] -> [ [1,3], [5,6] ] rangelist_to_plainlist( rangelist ) inverse function of plainlist_to_rangelist, for internal use only tuplelist_to_jsondict( tuplelist ) convert a list of tuples of format (run number, [lumisection numbers]) to json dict jsondict_to_tuplelist( jsondict ) inverse function of tuplelist_to_jsondict get_lcs( jsonlist ) return a jsondict object that is the largest common subset (LCS) between the jsondict objects in jsonlist input arguments: - jsonlist: a list of dicts in the conventional json format, so each element in jsonlist must be e.g. { \"294927\": [ [ 55,85 ], [ 95,105] ], \"294928\": [ [1,33 ] ] } remark: this is probably not the most efficient implementation, open for improvement...","title":"loadjson( jsonfile )"},{"location":"utils/json_utils/#loadjson-jsonfile","text":"load the content of a json file into a python object input arguments: - jsonfile: the name (or full path if needed) to the json file to be read output: - an dict object as specified in the note below note: the json file is supposed to contain an object like this example: { \"294927\": [ [ 55,85 ], [ 95,105] ], \"294928\": [ [1,33 ] ] } although no explicit checking is done in this function, objects that don't have this structure will probably lead to errors further in the code","title":"loadjson( jsonfile )"},{"location":"utils/json_utils/#writejson-jsondict-outputfile-overwritefalse","text":"inverse function of loadjson input arguments - jsondict: dict object to be written to a json file - outputfile: output file to be written, extension '.json' will be appended automatically - overwrite: boolean whether to overwrite outputfile if it exists (default: throw exception)","title":"writejson( jsondict, outputfile, overwrite=False )"},{"location":"utils/json_utils/#injson_single-run-lumi-jsondict","text":"helper function for injson, only for internal use input arguments: - run and lumi are integers - jsondict is an object loaded from a json file output: - boolean whether the run/lumi combination is in the json dict","title":"injson_single( run, lumi, jsondict )"},{"location":"utils/json_utils/#injson-run-lumi-jsonfilenone-jsondictnone","text":"find if a run and lumi combination is in a given json file input arguments: - run and lumi: integers or (equally long) arrays of integers - jsonfile: a path to a json file - jsondict: a dict loaded from a json file note: either jsonfile or jsondict must not be None! output: boolean or array of booleans (depending on run and lumi)","title":"injson( run, lumi, jsonfile=None, jsondict=None )"},{"location":"utils/json_utils/#isgoldenrunlumi","text":"find if a run and lumi combination is in the golden json file input arguments: - run and lumi: either integers or (equally long) arrays of integers","title":"isgolden(run,lumi)"},{"location":"utils/json_utils/#isdcsonrunlumi","text":"find if a run and lumi combination is in DCS-only json file input arguments: - run and lumi: either integers or (equally long) arrays of integers","title":"isdcson(run,lumi)"},{"location":"utils/json_utils/#ispixelgoodrunlumi","text":"find if a run and lumi combination is in the json with good pixel flag note: this json was custom generated in run regisitry and not official!","title":"ispixelgood(run,lumi)"},{"location":"utils/json_utils/#ispixelbadrunlumi","text":"find if a run and lumi combination is in the json with bad pixel flag note: this json was custom generated in run registry and not official! note: not simply the negation of ispixelgood! json has more relaxed conditions on DCS-like criteria.","title":"ispixelbad(run,lumi)"},{"location":"utils/json_utils/#plainlist_to_rangelist-plainlist","text":"helper function for tuplelist_to_jsondict, only for internal use input arguments: - plainlist: a list of integers in increasing order, must have length >= 2 output: - a list lists representing ranges example: [1,2,3,5,6] -> [ [1,3], [5,6] ]","title":"plainlist_to_rangelist( plainlist )"},{"location":"utils/json_utils/#rangelist_to_plainlist-rangelist","text":"inverse function of plainlist_to_rangelist, for internal use only","title":"rangelist_to_plainlist( rangelist )"},{"location":"utils/json_utils/#tuplelist_to_jsondict-tuplelist","text":"convert a list of tuples of format (run number, [lumisection numbers]) to json dict","title":"tuplelist_to_jsondict( tuplelist )"},{"location":"utils/json_utils/#jsondict_to_tuplelist-jsondict","text":"inverse function of tuplelist_to_jsondict","title":"jsondict_to_tuplelist( jsondict )"},{"location":"utils/json_utils/#get_lcs-jsonlist","text":"return a jsondict object that is the largest common subset (LCS) between the jsondict objects in jsonlist input arguments: - jsonlist: a list of dicts in the conventional json format, so each element in jsonlist must be e.g. { \"294927\": [ [ 55,85 ], [ 95,105] ], \"294928\": [ [1,33 ] ] } remark: this is probably not the most efficient implementation, open for improvement...","title":"get_lcs( jsonlist )"},{"location":"utils/plot_utils/","text":"plot_hists(histlist,colorlist=[],labellist=[],transparency=1,xlims=(0,-1), (no valid documentation found) plot_hists_multi(histlist,colorlist=[],labellist=[],transparency=1,xlims=(0,-1), (no valid documentation found) plot_hists_from_df(df,histtype,nhists) plot a number of histograms in a dataframe - df is the dataframe from which to plot - histtype is the name of the histogram type (e.g. 'chargeInner_PXLayer_1') - nhists is the number of histograms to plot plot_sets(setlist,fig=None,ax=None,colorlist=[],labellist=[],transparencylist=[],xlims=(0,-1), (no valid documentation found) plot_anomalous(histlist,ls,highlight=-1,hrange=-1) histlist and ls are a list of histograms and corresponding lumisection numbers lsnumber is the lumisection number of the histogram to highlight hrange is the number of histograms before and after lsnumber to plot (default: whole run) plot_moments(moments,ls,dims,fig=None,ax=None,markersize=10) moments is an (nhists,nmoments) array dims is a tuple of two or three values between 0 and nmoments-1 plot_distance(dists,ls=None,rmlargest=0.,doplot=True, (no valid documentation found) plot_loss(data, xlims=None, (no valid documentation found) plot_mse(mse,rmlargest=0.,doplot=True, (no valid documentation found) plot_score_dist( scores, labels, nbins=20, normalize=False, (no valid documentation found)","title":"plot_hists(histlist,colorlist=[],labellist=[],transparency=1,xlims=(0,-1),"},{"location":"utils/plot_utils/#plot_histshistlistcolorlistlabellisttransparency1xlims0-1","text":"(no valid documentation found)","title":"plot_hists(histlist,colorlist=[],labellist=[],transparency=1,xlims=(0,-1),"},{"location":"utils/plot_utils/#plot_hists_multihistlistcolorlistlabellisttransparency1xlims0-1","text":"(no valid documentation found)","title":"plot_hists_multi(histlist,colorlist=[],labellist=[],transparency=1,xlims=(0,-1),"},{"location":"utils/plot_utils/#plot_hists_from_dfdfhisttypenhists","text":"plot a number of histograms in a dataframe - df is the dataframe from which to plot - histtype is the name of the histogram type (e.g. 'chargeInner_PXLayer_1') - nhists is the number of histograms to plot","title":"plot_hists_from_df(df,histtype,nhists)"},{"location":"utils/plot_utils/#plot_setssetlistfignoneaxnonecolorlistlabellisttransparencylistxlims0-1","text":"(no valid documentation found)","title":"plot_sets(setlist,fig=None,ax=None,colorlist=[],labellist=[],transparencylist=[],xlims=(0,-1),"},{"location":"utils/plot_utils/#plot_anomaloushistlistlshighlight-1hrange-1","text":"histlist and ls are a list of histograms and corresponding lumisection numbers lsnumber is the lumisection number of the histogram to highlight hrange is the number of histograms before and after lsnumber to plot (default: whole run)","title":"plot_anomalous(histlist,ls,highlight=-1,hrange=-1)"},{"location":"utils/plot_utils/#plot_momentsmomentslsdimsfignoneaxnonemarkersize10","text":"moments is an (nhists,nmoments) array dims is a tuple of two or three values between 0 and nmoments-1","title":"plot_moments(moments,ls,dims,fig=None,ax=None,markersize=10)"},{"location":"utils/plot_utils/#plot_distancedistslsnonermlargest0doplottrue","text":"(no valid documentation found)","title":"plot_distance(dists,ls=None,rmlargest=0.,doplot=True,"},{"location":"utils/plot_utils/#plot_lossdata-xlimsnone","text":"(no valid documentation found)","title":"plot_loss(data, xlims=None,"},{"location":"utils/plot_utils/#plot_msemsermlargest0doplottrue","text":"(no valid documentation found)","title":"plot_mse(mse,rmlargest=0.,doplot=True,"},{"location":"utils/plot_utils/#plot_score_dist-scores-labels-nbins20-normalizefalse","text":"(no valid documentation found)","title":"plot_score_dist( scores, labels, nbins=20, normalize=False,"}]}